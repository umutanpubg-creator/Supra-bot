import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters
)

# Fa√Ωl bukjasy
if not os.path.exists("vpn_files"):
    os.makedirs("vpn_files")

TOKEN = "8362675135:AAGUQ3zTLWKoGDEU6wWNCi9RCu7aHmehmBQ"
adminler = {6934292008}

kanallar = []         # Adaty agza bolmaly kanallar
optional_kanallar = []  # go≈üulmasa-da bolar kanallar
gizlin_kanallar = []  # Gizlin g√∂rn√º≈üde barlanmaly kanallar
menu_yazgy = "üëã Kanallara go≈üuly≈à we VPN kody aly≈à:"
vpn_kody = "üü¢ T√§ze VPN: DARKTUNNEL-123456"
vpn_fa√Ωl_√Ωoly = "vpn.ovpn"
banlananlar = []
ulanyjylar = set()

# /start komandasy
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    ulanyjylar.add(user_id)

    if user_id in banlananlar:
        await update.message.reply_text("üö´ Siz banlandy≈àyz.")
        return

    kanal_buttons = []
    row = []

    # Go≈üulmaly kanallar
    for i, (name, url) in enumerate(kanallar, 1):
        row.append(InlineKeyboardButton(name, url=url))
        if i % 2 == 0:
            kanal_buttons.append(row)
            row = []

    if row:
        kanal_buttons.append(row)

    # Optional kanallary menu d√ºwmesine go≈ümak
    if optional_kanallar:
        # kanal_buttons.append([InlineKeyboardButton("üîπ Optional Kanallar:", callback_data="optional_kanal_info")])
        for name, url in optional_kanallar:
            kanal_buttons.append([InlineKeyboardButton(name, url=url)])

    kanal_buttons.append([InlineKeyboardButton("‚úÖ Kody aly≈à", callback_data="kody_al")])
    keyboard = InlineKeyboardMarkup(kanal_buttons)

    await update.message.reply_text(menu_yazgy, reply_markup=keyboard)

# Callback d√ºwmeleri
async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if query.data == "kody_al":
        if user_id in banlananlar:
            await query.message.reply_text("üö´ Siz banlandy≈àyz.")
            return

        not_joined = []
        for name, url in kanallar + gizlin_kanallar:  # Iki sanawy bile barla√Ωarys
            kanal_username = url.split("/")[-1]
            try:
                member = await context.bot.get_chat_member(chat_id=f"@{kanal_username}", user_id=user_id)
                if member.status in ["left", "kicked"]:
                    not_joined.append(name)
            except:
                not_joined.append(name)

        if not_joined:
            await query.message.reply_text(
                "üìõ Siz a≈üakdaky kanallara go≈üulmadyk:\n" +
                "\n".join(f"‚Ä¢ {n}" for n in not_joined)
            )
            return

        # Eger hemmesine go≈üulan bolsa, VPN kod we fa√Ωl iberil√Ω√§r:
        await query.message.reply_text(vpn_kody)

        try:
            with open(vpn_fa√Ωl_√Ωoly, "rb") as file:
                await context.bot.send_document(chat_id=user_id, document=file, filename=os.path.basename(vpn_fa√Ωl_√Ωoly))
        except FileNotFoundError:
            await query.message.reply_text("Sizi≈à Kodu≈àyz üëÜüèªüëÜüèª.")

    elif query.data == "panel":
        if user_id not in adminler:
            await query.message.reply_text("‚ùå Bu di≈àe admin √º√ßin.")
            return
        await show_panel(update, context)

    elif query.data == "banla":
        context.user_data["banla"] = True
        await query.message.reply_text("Ulanyjy ID girizi≈à (banlamak √º√ßin):")

    elif query.data == "ban_ac":
        context.user_data["ban_ac"] = True
        await query.message.reply_text("ID girizi≈à (ban a√ßmak √º√ßin):")

    elif query.data == "vpn_uytget":
        context.user_data["vpn_text_only"] = True
        await query.message.reply_text("T√§ze VPN koduny girizi≈à (di≈àe tekst):")

    elif query.data == "vpn_text_only":
        context.user_data["vpn_text_only"] = True
        await query.message.reply_text("T√§ze VPN koduny girizi≈à (di≈àe tekst):")

    elif query.data == "bildiris":
        context.user_data["bildiris"] = True
        await query.message.reply_text("Bildiri≈üi girizi≈à:")

    elif query.data == "kanal_gos":
        context.user_data["kanal_gos"] = True
        await query.message.reply_text("Kanal ady we URL girizi≈à. Mysal: Kanal Ady | https://t.me/kanal")

    elif query.data == "kanal_ayyr":
        if not kanallar:
            await query.message.reply_text("üì≠ Kanal √Ωok.")
        else:
            kanal_list = "\n".join(f"{i+1}. {ad}" for i, (ad, _) in enumerate(kanallar))
            await query.message.reply_text(f"A√Ωyrmak isle√Ω√§n kanaly≈àyzy≈à belgisi:\n{kanal_list}")
            context.user_data["kanal_ayyr"] = True

    elif query.data == "gizlin_kanal_gos":
        context.user_data["gizlin_kanal_gos"] = True
        await query.message.reply_text("Gizlin kanal ady we URL girizi≈à. Mysal: Ady | https://t.me/kanal")

    elif query.data == "gizlin_kanal_ayyr":
        if not gizlin_kanallar:
            await query.message.reply_text("üì≠ Gizlin kanal √Ωok.")
        else:
            sanaw = "\n".join(f"{i+1}. {ad}" for i, (ad, _) in enumerate(gizlin_kanallar))
            await query.message.reply_text(f"A√Ωyrmak isle√Ω√§n gizlin kanaly≈àyzy≈à belgisi:\n{sanaw}")
            context.user_data["gizlin_kanal_ayyr"] = True

    elif query.data == "optional_kanal_gos":
        context.user_data["optional_kanal_gos"] = True
        await query.message.reply_text("Optional kanal ady we URL girizi≈à. Mysal: Ady | https://t.me/kanal")

    elif query.data == "optional_kanal_ayyr":
        if not optional_kanallar:
            await query.message.reply_text("üì≠ Optional kanal √Ωok.")
        else:
            sanaw = "\n".join(f"{i+1}. {ad}" for i, (ad, _) in enumerate(optional_kanallar))
            await query.message.reply_text(f"A√Ωyrmak isle√Ω√§n optional kanaly≈àyzy≈à belgisi:\n{sanaw}")
            context.user_data["optional_kanal_ayyr"] = True

    elif query.data == "optional_kanal_info":
        if optional_kanallar:
            sanaw = "\n".join(f"‚Ä¢ {ad}" for ad, _ in optional_kanallar)
            await query.message.reply_text(f"üîπ Optional Kanallar:\n{sanaw}")
        else:
            await query.message.reply_text("üì≠ Optional kanal √Ωok.")

    elif query.data == "admin_gos":
        context.user_data["admin_gos"] = True
        await query.message.reply_text("T√§ze admin ID girizi≈à:")

    # Admin A√Ωyrmak
    elif query.data == "admin_ayyr":
        if len(adminler) <= 1:
            await query.message.reply_text("‚ö†Ô∏è Di≈àe bir admin bar.")
            return

        admin_list = ""
        for aid in adminler:
            try:
                user = await context.bot.get_chat(aid)
                username = user.username or user.first_name or "üë§ (no name)"
                admin_list += f"{aid} @{username}\n"
            except:
                admin_list += f"{aid} ‚ùå Ulanyjy tapylmady\n"

        await query.message.reply_text(f"A√Ωyrmak isle√Ω√§n admini≈à ID-si:\n{admin_list}")
        context.user_data["admin_ayyr"] = True

    elif query.data == "menu_uytget":
        context.user_data["menu_uytget"] = True
        await query.message.reply_text("T√§ze men√Ωu √Ωazgysyny girizi≈à:")

    elif query.data == "statistika":
        if user_id not in adminler:
            await query.message.reply_text("‚ùå Bu di≈àe admin √º√ßin.")
            return

        total_users = len(ulanyjylar)
        total_banned = len(banlananlar)
        total_admins = len(adminler)
        total_channels = len(kanallar)
        total_optional = len(optional_kanallar)
        total_hidden = len(gizlin_kanallar)

        stats_text = (
    "üìä *Bot Statistikalary:*\n\n"
    f"üë• Ulanyjylar: *{total_users}*\n"
    f"üö´ Banlananlar: *{total_banned}*\n"
    f"üë§ Adminler: *{total_admins}*\n"
    f"üì¢ Kanallar: *{total_channels}*\n"
    f"üïµÔ∏è‚Äç‚ôÇÔ∏è Gizlin: *{total_hidden}*\n"
    f"üîπ Optional: *{total_optional}*"
)

        await query.message.reply_text(stats_text, parse_mode="Markdown")

# Admin panel
async def show_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    admin_keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üö´ Ban ulanyjy", callback_data="banla")],
        [InlineKeyboardButton("‚ôªÔ∏è Ban a√ß", callback_data="ban_ac")],
        [InlineKeyboardButton("üîÅ VPN kod √º√Ωtget", callback_data="vpn_uytget")],
        [InlineKeyboardButton("üì¢ Bildiri≈ü ugrat", callback_data="bildiris")],
        [InlineKeyboardButton("‚ûï Kanal Go≈ü", callback_data="kanal_gos")],
        [InlineKeyboardButton("‚ûñ Kanal A√Ωyr", callback_data="kanal_ayyr")],
        [InlineKeyboardButton("üïµÔ∏è‚Äç‚ôÇÔ∏è‚ûï Gizlin Kanal Go≈ü", callback_data="gizlin_kanal_gos")],
        [InlineKeyboardButton("üïµÔ∏è‚Äç‚ôÇÔ∏è‚ûñ Gizlin Kanal A√Ωyr", callback_data="gizlin_kanal_ayyr")],
        [InlineKeyboardButton("‚ûï Optional Kanal Go≈ü", callback_data="optional_kanal_gos")],
        [InlineKeyboardButton("‚ûñ Optional Kanal A√Ωyr", callback_data="optional_kanal_ayyr")],
        [InlineKeyboardButton("üë§‚ûï Admin Go≈ü", callback_data="admin_gos")],
        [InlineKeyboardButton("üë§‚ûñ Admin A√Ωyr", callback_data="admin_ayyr")],
        [InlineKeyboardButton("üìù Men√Ωu √ú√Ωtget", callback_data="menu_uytget")],
        [InlineKeyboardButton("üìä Statistika", callback_data="statistika")]
    ])
    await update.message.reply_text("üõ† Admin panel:", reply_markup=admin_keyboard)

async def panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in adminler:
        return
    await show_panel(update, context)

# Message handler
async def mesaj_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text if update.message.text else ""

    if context.user_data.get("banla"):
        try:
            banlananlar.append(int(text))
            await update.message.reply_text("‚úÖ Banlandy.")
        except:
            await update.message.reply_text("‚ùå N√§dogry ID")
        del context.user_data["banla"]

    elif context.user_data.get("ban_ac"):
        try:
            banlananlar.remove(int(text))
            await update.message.reply_text("‚úÖ Ban a√ßyldy.")
        except:
            await update.message.reply_text("‚ùå ID tapylmady")
        del context.user_data["ban_ac"]

    elif context.user_data.get("vpn_text_only"):
        global vpn_kody
        vpn_kody = text
        await update.message.reply_text(f"‚úÖ T√§ze VPN kody √Ωatda saklandy:\n```\n{vpn_kody}\n```", parse_mode="Markdown")
        del context.user_data["vpn_text_only"]

    elif context.user_data.get("bildiris"):
        for uid in ulanyjylar:
            try:
                await context.bot.send_message(chat_id=uid, text=f"üì¢ Bildiri≈ü:\n\n{text}")
            except:
                pass
        await update.message.reply_text(f"‚úÖ Bildiri≈ü ugradyldy:\n```\n{text}\n```", parse_mode="Markdown")
        del context.user_data["bildiris"]

    elif context.user_data.get("kanal_gos"):
        try:
            ad, url = map(str.strip, text.split("|"))
            if not url.startswith("https://t.me/"):
                raise ValueError
            kanallar.append((ad, url))
            await update.message.reply_text("‚úÖ Kanal go≈üuldy")
        except:
            await update.message.reply_text("‚ùå Format √Ωal≈ày≈ü. Mysal: Ady | https://t.me/kanal")
        del context.user_data["kanal_gos"]

    elif context.user_data.get("kanal_ayyr"):
        try:
            indeks = int(text) - 1
            pozuldy = kanallar.pop(indeks)
            await update.message.reply_text(f"‚ùé Kanal a√Ωryldy: {pozuldy[0]}")
        except:
            await update.message.reply_text("‚ùå N√§dogry belgi")
        del context.user_data["kanal_ayyr"]

    elif context.user_data.get("gizlin_kanal_gos"):
        try:
            ad, url = map(str.strip, text.split("|"))
            if not url.startswith("https://t.me/"):
                raise ValueError
            gizlin_kanallar.append((ad, url))
            await update.message.reply_text("‚úÖ Gizlin kanal go≈üuldy")
        except:
            await update.message.reply_text("‚ùå Format √Ωal≈ày≈ü. Mysal: Ady | https://t.me/kanal")
        del context.user_data["gizlin_kanal_gos"]
        user_data["gizlin_kanal_gos"]

    elif context.user_data.get("gizlin_kanal_ayyr"):
        try:
            indeks = int(text) - 1
            pozuldy = gizlin_kanallar.pop(indeks)
            await update.message.reply_text(f"‚ùé Gizlin kanal a√Ωryldy: {pozuldy[0]}")
        except:
            await update.message.reply_text("‚ùå N√§dogry belgi")
        del context.user_data["gizlin_kanal_ayyr"]

    elif context.user_data.get("optional_kanal_gos"):
        try:
            ad, url = map(str.strip, text.split("|"))
            if not url.startswith("https://t.me/"):
                raise ValueError
            optional_kanallar.append((ad, url))
            await update.message.reply_text("‚úÖ Optional kanal go≈üuldy")
        except:
            await update.message.reply_text("‚ùå Format √Ωal≈ày≈ü. Mysal: Ady | https://t.me/kanal")
        del context.user_data["optional_kanal_gos"]
    
    elif context.user_data.get("optional_kanal_ayyr"):
        try:
            indeks = int(text) - 1
            pozuldy = optional_kanallar.pop(indeks)
            await update.message.reply_text(f"‚ùé Optional kanal a√Ωryldy: {pozuldy[0]}")
        except:
            await update.message.reply_text("‚ùå N√§dogry belgi")
        del context.user_data["optional_kanal_ayyr"]

    elif context.user_data.get("menu_uytget"):
        global menu_yazgy
        menu_yazgy = text
        await update.message.reply_text(f"‚úÖ T√§ze men√Ωu √Ωazgy:\n```\n{menu_yazgy}\n```", parse_mode="Markdown")
        del context.user_data["menu_uytget"]

# Boty ba≈ülat
app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("panel", panel))
app.add_handler(CallbackQueryHandler(callback_handler))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, mesaj_handler))
app.add_handler(MessageHandler(filters.Document.ALL, mesaj_handler))

print("‚úÖ Bot ba≈ülady!")
app.run_polling()